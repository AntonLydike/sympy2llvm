// RUN: sympy2xdsl -i %s mlir add f64 f64 | filecheck %s
// RUN: sympy2xdsl -i %s mlir add i23 i23 --int-t i23 | filecheck --check-prefix=I23 %s
// RUN: sympy2xdsl -i %s llvm add f64 f64 | filecheck --check-prefix=LLVM %s

a+b

// CHECK:      "llvm.func"() <{sym_name = "add", function_type = !llvm.func<f64 (f64, f64)>, CConv = #llvm.cconv<ccc>, linkage = #llvm.linkage<"internal">, visibility_ = 0 : i64}> ({
// CHECK-NEXT: ^0(%a : f64, %b : f64):
// CHECK-NEXT:   %0 = llvm.fadd %a, %b : f64
// CHECK-NEXT:   "llvm.return"(%0) : (f64) -> ()
// CHECK-NEXT: }) : () -> ()

// I23:      "llvm.func"() <{sym_name = "add", function_type = !llvm.func<i23 (i23, i23)>, CConv = #llvm.cconv<ccc>, linkage = #llvm.linkage<"internal">, visibility_ = 0 : i64}> ({
// I23-NEXT: ^0(%a : i23, %b : i23):
// I23-NEXT:   %0 = llvm.add %a, %b : i23
// I23-NEXT:   "llvm.return"(%0) : (i23) -> ()
// I23-NEXT: }) : () -> ()

// LLVM:      define double @add(double %a, double %b) {
// LLVM-NEXT:   %1 = fadd double %a, %b
// LLVM-NEXT:   ret double %1
// LLVM-NEXT: }
