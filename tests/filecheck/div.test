// RUN: sympy2xdsl -i %s mlir div f64 f64 | filecheck %s
// RUN: sympy2xdsl -i %s mlir div i23 i23 --int-t i23 | filecheck --check-prefix=I23 %s
// RUN: sympy2xdsl -i %s llvm div f64 f64 | filecheck --check-prefix=LLVM %s

a/b


// CHECK:      "llvm.func"() <{sym_name = "div", function_type = !llvm.func<f64 (f64, f64)>, CConv = #llvm.cconv<ccc>, linkage = #llvm.linkage<"internal">, visibility_ = 0 : i64}> ({
// CHECK-NEXT: ^0(%a : f64, %b : f64):
// CHECK-NEXT:   %0 = llvm.mlir.constant(-1) : i64
// CHECK-NEXT:   %1 = llvm.sitofp %0 : i64 to f64
// CHECK-NEXT:   %2 = llvm.fdiv %1, %b : f64
// CHECK-NEXT:   %3 = llvm.fdiv %a, %b : f64
// CHECK-NEXT:   "llvm.return"(%3) : (f64) -> ()
// CHECK-NEXT: }) : () -> ()

// I23:      "llvm.func"() <{sym_name = "div", function_type = !llvm.func<i23 (i23, i23)>, CConv = #llvm.cconv<ccc>, linkage = #llvm.linkage<"internal">, visibility_ = 0 : i64}> ({
// I23-NEXT: ^0(%a : i23, %b : i23):
// I23-NEXT:   %0 = llvm.mlir.constant(-1 : i23) : i23
// I23-NEXT:   %1 = llvm.sdiv %0, %b : i23
// I23-NEXT:   %2 = llvm.sdiv %a, %b : i23
// I23-NEXT:   "llvm.return"(%2) : (i23) -> ()
// I23-NEXT: }) : () -> ()

// LLVM:      define double @div(double %a, double %b) {
// LLVM-NEXT:   %1 = fdiv double %a, %b
// LLVM-NEXT:   ret double %1
// LLVM-NEXT: }
