// RUN: sympy2xdsl -i %s mlir test_pow f64 f64 | filecheck %s
// RUN: sympy2xdsl -i %s mlir test_pow i23 i23 --int-t i23 | filecheck --check-prefix=I23 %s
// RUN: sympy2xdsl -i %s llvm test_pow f64 f64 | filecheck --check-prefix=LLVM %s
// RUN: sympy2xdsl -i %s llvm test_pow i32 i32 --int-t i32 | filecheck --check-prefix=I32 %s

a**(b*3)

// CHECK:      "llvm.func"() <{sym_name = "test_pow", function_type = !llvm.func<f64 (f64, f64)>, CConv = #llvm.cconv<ccc>, linkage = #llvm.linkage<"internal">, visibility_ = 0 : i64}> ({
// CHECK-NEXT: ^0(%a : f64, %b : f64):
// CHECK-NEXT:   %0 = llvm.mlir.constant(3) : i64
// CHECK-NEXT:   %1 = llvm.sitofp %0 : i64 to f64
// CHECK-NEXT:   %2 = llvm.fmul %1, %b : f64
// CHECK-NEXT:   %3 = math.powf %a, %2 : f64
// CHECK-NEXT:   "llvm.return"(%3) : (f64) -> ()
// CHECK-NEXT: }) : () -> ()

// I23:      "llvm.func"() <{sym_name = "test_pow", function_type = !llvm.func<i23 (i23, i23)>, CConv = #llvm.cconv<ccc>, linkage = #llvm.linkage<"internal">, visibility_ = 0 : i64}> ({
// I23-NEXT: ^0(%a : i23, %b : i23):
// I23-NEXT:   %0 = llvm.mlir.constant(3 : i23) : i23
// I23-NEXT:   %1 = llvm.mul %0, %b : i23
// I23-NEXT:   %2 = math.ipowi %a, %1 : i23
// I23-NEXT:   "llvm.return"(%2) : (i23) -> ()
// I23-NEXT: }) : () -> ()

// LLVM:      define double @test_pow(double %a, double %b) {
// LLVM-NEXT:   %1 = fmul double 3.0, %b
// LLVM-NEXT:   %2 = call double @pow(double %a, double %1)
// LLVM-NEXT:   ret double %2
// LLVM-NEXT: }
// LLVM-EMPTY:
// LLVM-NEXT: ; Declare external functions:
// LLVM-NEXT: declare double @pow(double, double)

// I32:      define double @test_pow(i32 %a, i32 %b) {
// I32-NEXT:   %1 = sitofp i32 %a to double
// I32-NEXT:   %2 = mul i32 3, %b
// I32-NEXT:   %3 = sitofp i32 %2 to double
// I32-NEXT:   %4 = call double @pow(double %1, double %3)
// I32-NEXT:   ret double %4
// I32-NEXT: }
// I32-EMPTY:
// I32-NEXT: ; Declare external functions:
// I32-NEXT: declare double @pow(double, double)
