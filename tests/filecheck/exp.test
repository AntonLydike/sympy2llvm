// RUN: sympy2xdsl -i %s mlir exp f64 f64 | filecheck %s
// RUN: sympy2xdsl -i %s mlir exp i23 i23 --int-t i23 | filecheck --check-prefix=I23 %s
// RUN: sympy2xdsl -i %s llvm exp f64 f64 | filecheck --check-prefix=LLVM %s

a**b

// CHECK:      "llvm.func"() <{sym_name = "exp", function_type = !llvm.func<f64 (f64, f64)>, CConv = #llvm.cconv<ccc>, linkage = #llvm.linkage<"internal">, visibility_ = 0 : i64}> ({
// CHECK-NEXT: ^0(%a : f64, %b : f64):
// CHECK-NEXT:   %0 = "math.powf"(%a, %b) : (f64, f64) -> f64
// CHECK-NEXT:   "llvm.return"(%0) : (f64) -> ()
// CHECK-NEXT: }) : () -> ()

// I23:      "llvm.func"() <{sym_name = "exp", function_type = !llvm.func<i23 (i23, i23)>, CConv = #llvm.cconv<ccc>, linkage = #llvm.linkage<"internal">, visibility_ = 0 : i64}> ({
// I23-NEXT: ^0(%a : i23, %b : i23):
// I23-NEXT:   %0 = llvm.sitofp %a : i23 to i23
// I23-NEXT:   %1 = "math.powf"(%0, %b) : (i23, i23) -> i23
// I23-NEXT:   "llvm.return"(%1) : (i23) -> ()
// I23-NEXT: }) : () -> ()

// LLVM:      define double @exp(double %a, double %b) {
// LLVM-NEXT:   %1 = call double @pow(double %a, double %b)
// LLVM-NEXT:   ret double %1
// LLVM-NEXT: }
// LLVM-EMPTY:
// LLVM-NEXT: ; Declare external functions:
// LLVM-NEXT: declare double @pow(double, double)
